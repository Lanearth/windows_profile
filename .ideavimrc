" M->cmd, A->option, C->control
" <ESC> - escape, <BS> - backspace, <CR> - return
" leader
let mapleader = " "

" ======================================================
" vim的插件功能
" ======================================================
" 启用esaymotion功能 
set easymotion
" 启用vim surround功能
set surround
" 启用multi cursor
set multiple-cursors
" 能用gcc gc+motion来注释代码
set commentary
" 启用vim自动切换输入法模式
set keep-english-in-normal-and-restore-in-insert
set 
" nerdTree
set NERDTree
map <C-T> :NERDTreeFind<CR>
set ReplaceWithRegister
set textobj-entire

" ======================================================
" vim的默认配置
" ======================================================
set 
" 显示行号`
set nu
" 显示相对行号
set rnu
" 设置上下文行数
set scrolloff=5
" 高亮搜索
set hlsearch
" 自动定位到输入中的字符串，不需要回车搜索
set incsearch
" 显示当前的模式
set showmode
" 共享系统粘贴板
set clipboard=unnamed
set clipboard+=ideaput
" 搜索时智能匹配大小写
set ignorecase smartcase

" =====================================================
" 模式切换行为
" ======================================================
" insert
inoremap jk <esc>
inoremap jj <esc>
inoremap kk <esc>


" ======================================================
" emacs-like keybindings
" ======================================================
map <C-o> <action>(Back)
map <C-i> <action>(Forward)
map <leader>g <Action>(FindInPath)
" 在插入模式下Forward不太正常
inoremap <C-o> <Esc>                  
inoremap <C-i> <Esc>

inoremap <C-J> <ESC>:action Down<CR>
inoremap <C-K> <ESC>:action Up<CR>
inoremap <C-L> <ESC>:action Right<CR>
inoremap <C-H> <ESC>:action Left<CR>
" 模拟 Emacs 键绑定
""" Spacemacs hybrid mode.

" Go to first character
inoremap <C-a>    <Esc>I
cnoremap <C-a>    <Home>

" Go to end of line
inoremap <C-e>    <Esc>A
cnoremap <C-e>    <End>

" Delete character
inoremap <C-d>    <del>
inoremap <C-b>    <bs>
" Delete to line end 
" inoremap <C-k>    <Esc>:action EditorDeleteToLineEnd<CR>a

" Go to next word
inoremap <A-f>    <C-right>

" Go to previous word
inoremap <A-b>    <Esc>:action EditorPreviousWord<CR>i



" ======================================================
" 光标在页面内移动时，自动居中
" ======================================================
nnoremap j jzz
nnoremap k kzz

" normal
nnoremap dd ddzz
" Visual
vnoremap d dzz

" ======================================================
" 光标跨越窗口
" ======================================================
" 使用tab键快速切换buffers
nnoremap <TAB> gt
nnoremap <S-TAB> gT
vnoremap <TAB> gt
vnoremap <S-TAB> gT

" 打开终端
nnoremap <leader>t :!
" ======================================================
" 调用idea本身的查询
" ======================================================
" find
noremap <leader>/ <ESC>:action Find<CR>
" replace
noremap <leader>? <ESC>:action Replace<CR>
" global find
noremap g/ <ESC>:FindInPath<CR>
" noremap <C-D> <C-D>zz
" noremap <C-U> <C-U>zz

noremap <leader>` <ESC>:action SelectInProjectView<CR>
" Leader key relevant
nnoremap <Leader>j <ESC>:action AceAction<CR>
nnoremap <Leader>k <ESC>:action AceLineAction<CR>
" quit
nnoremap <Leader>c :action CommentByLineComment<CR>
" write to favorite
noremap <leader>w <ESC>:action AddToFavoritesPopup<CR>
" error description
noremap <leader>e <ESC>:action ShowErrorDescription<CR>
" return
noremap <leader>r <ESC>:action Rerun<CR>
" Windows或者MacOS的快捷键都与t相关, 所以选择t作为键
noremap <leader>t <ESC>:action Refactorings.QuickListPopupAction<CR>
" y
noremap <leader>y <ESC>:action """<CR>
" usage
noremap <leader>u <ESC>:action ShowUsages<CR>
" import
noremap <leader>i <ESC>:action Maven.Reimport<CR>
" open file path
noremap <leader>o <ESC>:action ShowFilePath<CR>
" show projects
noremap <leader>p <ESC>:action ManageRecentProjects<CR>
" structure
noremap <leader>s <ESC>:action FileStructurePopup<CR>
" debug option
noremap <leader>d <ESC>:action ChooseDebugConfiguration<CR>
" 同样也是debug，因为d已经被ChooseDebugConfiguration占领, 所以就放在了d键隔壁.
noremap <leader>f <ESC>:action DebugClass<CR>
" g
noremap <leader>g <ESC>:action Generate<CR>
" hide all
noremap <leader>h <ESC>:action HideAllWindows<CR>

" light up
noremap <leader>l <ESC>:action HighlightUsagesInFile<CR>
" 粘贴最近复制寄存器
noremap <leader>; "0p

" 本行皆为debug所用
" resume - z
noremap <leader>z <ESC>:action Resume<CR>
" step over
noremap <leader>x <ESC>:action StepOver<CR>
" step into
" noremap <leader>c <ESC>:action SmartStepInto<CR>
" evaluate expression - v
noremap <leader>v <ESC>:action EvaluateExpression<CR>
" breakpoints
noremap <leader>b <ESC>:action ViewBreakpoints<CR>
" 因为属于breakpoint范畴的功能, 所以就选择了b和m的隔壁
noremap <leader>n <ESC>:action ToggleLineBreakpoint<CR>
" mute breakpoints
noremap <leader>m <ESC>:action XDebugger.MuteBreakpoints<CR>

" g key relevant
"
" q
"noremap gq <ESC>:action <CR>
" switcher
noremap gw <ESC>:action RecentFiles<CR>
" e
"noremap ge <ESC>:action <CR>
" r
"noremap gr <ESC>:action <CR>
" translator(third party plugin)
noremap gt <ESC>:action $EditorTranslateAction<CR>
" y
noremap gy <ESC>:action CopyReference<CR>
" u
"noremap gu <ESC>:action <CR>
" intention
noremap gi <ESC>:action ShowIntentionActions<CR>
" o
"noremap go <ESC>:action <CR>
" param info
noremap gp <ESC>:action ParameterInfo<CR>

" a
"noremap ga <ESC>:action <CR>
" goto source
noremap gi <ESC>:action GotoImplementation<CR>
" goto declaration
noremap gd <ESC>:action GotoDeclaration<CR>
" goto file
noremap gf <ESC>:action GotoFile<CR>
" g
"noremap gg <ESC>:action MUST_NOT_BE_CHANGED!!!<CR>
" hierarchy
noremap ghc <ESC>:action CallHierarchy<CR>
noremap ght <ESC>:action TypeHierarchy<CR>
noremap ghm <ESC>:action MethodHierarchy<CR>
" j analyze data flow in
noremap gj <ESC>:action SliceBackward<CR>
" k analyze data flow out
noremap gk <ESC>:action SliceForward<CR>
" l
"noremap gl <ESC>:action <CR>

" z
"noremap gz <ESC>:action <CR>
" close all but this
noremap gx <ESC>:action CloseAllEditorsButActive<CR>
" compile
noremap gc <ESC>:action CompileDirty<CR>
" v
"noremap gv <ESC>:action <CR>
" b
noremap gb <ESC>:action FindBugs.CurrentFileAction<CR>
" goto class
noremap gn <ESC>:action GotoClass<CR>
" goto method
noremap gm <ESC>:action GotoSymbol<CR>

" \ also works
"noremap \q <ESC>:action <CR>
" refresh
noremap \r <ESC>:source ~/.ideavimrc<CR>
" uml popup
noremap \u <ESC>:action ShowUmlDiagramPopup<CR>
" git flow
noremap \[ <ESC>:action Gitflow.OpenGitflowPopup<CR>
" Vcs
noremap \] <ESC>:action Vcs.QuickListPopupAction<CR>

" global find
noremap g/ <ESC>:action FindInPath<CR>
" gloaal replace
noremap g' <ESC>:action ReplaceInPath<CR>

" previous method
noremap [[ <ESC>:action MethodUp<CR>
" next method
noremap ]] <ESC>:action MethodDown<CR>

" multiple cursors
map <A-M>  <A-N>
set clipboard+=ideaput

" Reformat Code
vnoremap <leader>r <ESC>:action ReformatCode<CR>